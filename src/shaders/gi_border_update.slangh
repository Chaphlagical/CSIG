#include "common.slangh"

#if defined(DEPTH_PROBE)
#define PROBE_SIZE 16
#define NUM_THREADS_X 8
#define NUM_THREADS_Y 8
#else
#define PROBE_SIZE 8
#define NUM_THREADS_X 8
#define NUM_THREADS_Y 4
#endif

#define PROBE_SIZE_WITH_BORDER (PROBE_SIZE + 2)

[[vk::binding(0, 0)]] RWTexture2D<float4> OutputIrradiance;
[[vk::binding(1, 0)]] RWTexture2D<float4> OutputDepth;

#if defined(DEPTH_PROBE)
static const int4 offsets[68] = {
    int4(16, 1, 1, 0),
    int4(15, 1, 2, 0),
    int4(14, 1, 3, 0),
    int4(13, 1, 4, 0),
    int4(12, 1, 5, 0),
    int4(11, 1, 6, 0),
    int4(10, 1, 7, 0),
    int4(9, 1, 8, 0),
    int4(8, 1, 9, 0),
    int4(7, 1, 10, 0),
    int4(6, 1, 11, 0),
    int4(5, 1, 12, 0),
    int4(4, 1, 13, 0),
    int4(3, 1, 14, 0),
    int4(2, 1, 15, 0),
    int4(1, 1, 16, 0),
    int4(16, 16, 1, 17),
    int4(15, 16, 2, 17),
    int4(14, 16, 3, 17),
    int4(13, 16, 4, 17),
    int4(12, 16, 5, 17),
    int4(11, 16, 6, 17),
    int4(10, 16, 7, 17),
    int4(9, 16, 8, 17),
    int4(8, 16, 9, 17),
    int4(7, 16, 10, 17),
    int4(6, 16, 11, 17),
    int4(5, 16, 12, 17),
    int4(4, 16, 13, 17),
    int4(3, 16, 14, 17),
    int4(2, 16, 15, 17),
    int4(1, 16, 16, 17),
    int4(1, 16, 0, 1),
    int4(1, 15, 0, 2),
    int4(1, 14, 0, 3),
    int4(1, 13, 0, 4),
    int4(1, 12, 0, 5),
    int4(1, 11, 0, 6),
    int4(1, 10, 0, 7),
    int4(1, 9, 0, 8),
    int4(1, 8, 0, 9),
    int4(1, 7, 0, 10),
    int4(1, 6, 0, 11),
    int4(1, 5, 0, 12),
    int4(1, 4, 0, 13),
    int4(1, 3, 0, 14),
    int4(1, 2, 0, 15),
    int4(1, 1, 0, 16),
    int4(16, 16, 17, 1),
    int4(16, 15, 17, 2),
    int4(16, 14, 17, 3),
    int4(16, 13, 17, 4),
    int4(16, 12, 17, 5),
    int4(16, 11, 17, 6),
    int4(16, 10, 17, 7),
    int4(16, 9, 17, 8),
    int4(16, 8, 17, 9),
    int4(16, 7, 17, 10),
    int4(16, 6, 17, 11),
    int4(16, 5, 17, 12),
    int4(16, 4, 17, 13),
    int4(16, 3, 17, 14),
    int4(16, 2, 17, 15),
    int4(16, 1, 17, 16),
    int4(16, 16, 0, 0),
    int4(1, 16, 17, 0),
    int4(16, 1, 0, 17),
    int4(1, 1, 17, 17)
};
#else
static const int4 offsets[36] = {
    int4(8, 1, 1, 0),
    int4(7, 1, 2, 0),
    int4(6, 1, 3, 0),
    int4(5, 1, 4, 0),
    int4(4, 1, 5, 0),
    int4(3, 1, 6, 0),
    int4(2, 1, 7, 0),
    int4(1, 1, 8, 0),
    int4(8, 8, 1, 9),
    int4(7, 8, 2, 9),
    int4(6, 8, 3, 9),
    int4(5, 8, 4, 9),
    int4(4, 8, 5, 9),
    int4(3, 8, 6, 9),
    int4(2, 8, 7, 9),
    int4(1, 8, 8, 9),
    int4(1, 8, 0, 1),
    int4(1, 7, 0, 2),
    int4(1, 6, 0, 3),
    int4(1, 5, 0, 4),
    int4(1, 4, 0, 5),
    int4(1, 3, 0, 6),
    int4(1, 2, 0, 7),
    int4(1, 1, 0, 8),
    int4(8, 8, 9, 1),
    int4(8, 7, 9, 2),
    int4(8, 6, 9, 3),
    int4(8, 5, 9, 4),
    int4(8, 4, 9, 5),
    int4(8, 3, 9, 6),
    int4(8, 2, 9, 7),
    int4(8, 1, 9, 8),
    int4(8, 8, 0, 0),
    int4(1, 8, 9, 0),
    int4(8, 1, 0, 9),
    int4(1, 1, 9, 9)
};
#endif

void copy_texel(int2 current_coord, uint index)
{
    int2 src_coord = current_coord + offsets[index].xy;
    int2 dst_coord = current_coord + offsets[index].zw;

#if defined(DEPTH_PROBE)
    OutputDepth[dst_coord] = OutputDepth.Load(src_coord);
#else
    OutputIrradiance[dst_coord] = OutputIrradiance.Load(src_coord);
#endif
}

[shader("compute")]
[numthreads(NUM_THREADS_X, NUM_THREADS_Y, 1)]
void main(CSParam param)
{
    const int2 current_coord = (int2(param.GroupID.xy) * int2(PROBE_SIZE_WITH_BORDER)) + int2(1);

    copy_texel(current_coord, param.GroupIndex);

    if (param.GroupIndex < 4)
        copy_texel(current_coord, (NUM_THREADS_X * NUM_THREADS_Y) + param.GroupIndex);
}
