#ifndef SCENE_SLANGH
#define SCENE_SLANGH

#include "common.slangh"

enum class SamplerType: int
{
    Linear,
    Nearest,
};

[[vk::binding(0, 0)]] RaytracingAccelerationStructure TLAS;
[[vk::binding(1, 0)]] StructuredBuffer<Instance> InstanceBuffer;
[[vk::binding(2, 0)]] StructuredBuffer<Emitter> EmitterBuffer;
[[vk::binding(3, 0)]] StructuredBuffer<Material> MaterialBuffer;
[[vk::binding(4, 0)]] StructuredBuffer<Vertex> VertexBuffer;
[[vk::binding(5, 0)]] StructuredBuffer<uint> IndexBuffer;
[[vk::binding(6, 0)]] ConstantBuffer<View> ViewBuffer;
[[vk::binding(7, 0)]] StructuredBuffer<AliasTable> EmitterAliasTableBuffer;
[[vk::binding(8, 0)]] StructuredBuffer<AliasTable> MeshAliasTableBuffer;
[[vk::binding(9, 0)]] ConstantBuffer<Scene> SceneBuffer;
[[vk::binding(10, 0)]] Texture2D Textures[];
[[vk::binding(11, 0)]] SamplerState Samplers[];
[[vk::binding(12, 0)]] TextureCube EnvMap;
[[vk::binding(13, 0)]] Texture2D IrradianceSH;
[[vk::binding(14, 0)]] TextureCube PrefilterMap;
[[vk::binding(15, 0)]] Texture2D GGXLut;
[[vk::binding(16, 0)]] Texture2D SobelSequence;
[[vk::binding(17, 0)]] Texture2D ScramblingRankingTile[];

void sample_emitter_alias_table(float2 rnd, out int index, out float pdf) 
{
	int selected_column = min(int(float(SceneBuffer.emitter_count) * rnd.x), int(SceneBuffer.emitter_count - 1));
	AliasTable col = EmitterAliasTableBuffer[selected_column];
	if (col.prob > rnd.y) 
	{
		index = selected_column;
		pdf = col.ori_prob;
	} 
	else 
	{
		index = col.alias;
		pdf = col.ori_prob;
	}
}

float emitter_pdf(int index)
{
    AliasTable col = EmitterAliasTableBuffer[index];
    return col.ori_prob;
}

void sample_mesh_alias_table(float2 rnd, Instance instance, out int index, out float pdf)
{
    int selected_column = int(instance.indices_offset / 3) + min(int(float(instance.indices_count / 3) * rnd.x), int(instance.indices_count / 3 - 1));
    AliasTable col = MeshAliasTableBuffer[selected_column];
    if (col.prob > rnd.y)
    {
        index = selected_column - int(instance.indices_offset / 3);
        pdf = col.ori_prob;
    }
    else
    {
        index = col.alias;
        pdf = col.ori_prob;
    }
}

float sample_blue_noise(int2 coord, int sample_index, int sample_dimension, Texture2D sobol_sequence_tex, Texture2D scrambling_ranking_tex)
{
    coord.x = coord.x % 128;
    coord.y = coord.y % 128;

    sample_index = sample_index % 256;
    sample_dimension = sample_dimension % 4;

    int ranked_sample_index = sample_index ^ int(clamp(scrambling_ranking_tex.Load(int3(coord.x, coord.y, 0)).b * 256.0, 0.0, 255.0));
    int value = int(clamp(sobol_sequence_tex.Load(int3(ranked_sample_index, 0, 0))[sample_dimension] * 256.0, 0.0, 255.0));

    value = value ^ int(clamp(scrambling_ranking_tex.Load(int3(coord.x, coord.y, 0))[sample_dimension % 2] * 256.0, 0.0, 255.0));

    float v = (0.5 + value) / 256.0;
    return v;
}

float2 next_sample(int2 coord, uint num_frames, uint rank)
{
    return float2(sample_blue_noise(coord, int(num_frames), 0, SobelSequence, ScramblingRankingTile[rank]),
                  sample_blue_noise(coord, int(num_frames), 1, SobelSequence, ScramblingRankingTile[rank]));
}

#endif