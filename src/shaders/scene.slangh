#ifndef SCENE_SLANGH
#define SCENE_SLANGH

#include "common.slangh"

enum class SamplerType: int
{
    PointWarp,
    PointClamp,
    LinearWarp,
    LinearClamp,
};

[[vk::binding(0, 0)]] RaytracingAccelerationStructure TLAS;
[[vk::binding(1, 0)]] StructuredBuffer<Instance> InstanceBuffer;
[[vk::binding(2, 0)]] StructuredBuffer<Emitter> EmitterBuffer;
[[vk::binding(3, 0)]] StructuredBuffer<Material> MaterialBuffer;
[[vk::binding(4, 0)]] StructuredBuffer<Vertex> VertexBuffer;
[[vk::binding(5, 0)]] StructuredBuffer<uint> IndexBuffer;
[[vk::binding(6, 0)]] ByteAddressBuffer IndirectDrawBuffer;
[[vk::binding(7, 0)]] ConstantBuffer<View> ViewBuffer;
[[vk::binding(8, 0)]] StructuredBuffer<AliasTable> EmitterAliasTableBuffer;
[[vk::binding(9, 0)]] StructuredBuffer<AliasTable> MeshAliasTableBuffer;
[[vk::binding(10, 0)]] ConstantBuffer<Scene> SceneBuffer;
[[vk::binding(11, 0)]] Texture2D Textures[];
[[vk::binding(12, 0)]] SamplerState Samplers[];
[[vk::binding(13, 0)]] TextureCube EnvMap;

void sample_emitter_alias_table(float2 rnd, out int index, out float pdf) 
{
	int selected_column = min(int(float(SceneBuffer.emitter_count) * rnd.x), int(SceneBuffer.emitter_count - 1));
	AliasTable col = EmitterAliasTableBuffer[selected_column];
	if (col.prob > rnd.y) 
	{
		index = selected_column;
		pdf = col.ori_prob;
	} 
	else 
	{
		index = col.alias;
		pdf = col.ori_prob;
	}
}

#endif